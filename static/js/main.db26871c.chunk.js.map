{"version":3,"sources":["logo.svg","redux/modules/month.js","redux/modules/year.js","redux/modules/reminders.js","redux/modules/reducers.js","redux/configureStore.js","components/EditReminderContext.js","rest-api.js","components/useEditReminder.js","components/EditReminder.js","helpers/dateHelper.js","components/ItemDate.js","components/Calendar.js","containers/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","moment","require","SET_MONTH","initialState","month","setMonth","dispatch","type","payload","reducer","state","action","SET_YEAR","year","setYear","ADD_REMINDER","REMOVE_REMINDER","REMOVE_REMINDERS","UPDATE_REMINDER","addReminder","dateString","reminderObj","date","reminder","editReminder","dateObj","removeReminders","removeReminder","newState","push","dates","index","findIndex","item","uuid","splice","history","combineReducers","router","connectRouter","reminders","createBrowserHistory","enhancers","composedEnhancers","compose","applyMiddleware","routerMiddleware","thunk","EditReminderContext","React","createContext","EditReminderProvider","props","useState","isOpen","start","end","note","city","color","setState","children","Provider","value","apiURL","axiosClient","axios","create","baseURL","WeatherAPI","get","filters","params","appid","units","useEditReminder","useContext","toggleOpen","setOpen","setCity","setStart","setEnd","reset","setOpenDate","setOpenEditMode","editMode","setNote","reminderState","setColor","uuidv4","useStyles","makeStyles","theme","form","display","flexDirection","margin","width","formControl","marginTop","spacing","minWidth","formControlLabel","input","memo","classes","useDebounce","valueWeather","fullWidth","maxWidth","weather","setWeather","loadingWeather","setLoadingWeather","fetchWeather","q","a","weatherObj","data","list","console","error","useEffect","handleClose","handleSubmit","swal","errorNote","length","Fragment","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","Input","onChange","e","target","defaultValue","className","inputProps","placeholder","TextField","label","textField","InputLabelProps","shrink","step","evt","onChangeComplete","hex","main","temp","description","noValidate","DialogActions","Button","onClick","disabled","tz","guess","smallLabels","fontSize","card","overflowX","cardEmpty","filter","title","pos","marginBottom","ItemDate","name","keyDate","sort","reminderA","reminderB","startA","startB","split","hourA","minuteA","hourB","minuteB","Number","parseInt","remindersJSX","map","itemReminder","Chip","styles","backgroundColor","variant","onDelete","openDialog","getUTCMonth","Card","CardContent","Typography","gutterBottom","getUTCDate","CardActions","IconButton","aria-label","Tooltip","defaultProps","root","flexGrow","paperTitle","height","paper","DAYS","months","Array","fill","monthDates","iteration","Date","UTC","days","weekDay","getDay","i","lastDate","setDate","getDate","getDaysInMonth","weekDays","dayName","Col","xs","lg","md","key","childrenItems","monthsJSX","slice","d","day","getFullYear","join","formatDate","remindersFiltered","Row","monthOptionsJSX","itemMonth","selected","toString","htmlFor","Container","fluid","connect","preloadedState","Calendar","createMuiTheme","typography","htmlFontSize","useNextVariants","store","createStore","createRootReducer","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db26871c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","const moment = require('moment');\n\nconst SET_MONTH = 'SET_MONTH';\n\nconst initialState = moment().month();\n\nexport const setMonth = month => (dispatch) => {\n  dispatch({\n    type: SET_MONTH,\n    payload: month\n  });\n};\n\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_MONTH: {\n      return action.payload;\n    }\n\n    default:\n      return state;\n  }\n}\n","const moment = require('moment');\n\nconst SET_YEAR = 'SET_YEAR';\n\nconst initialState = moment().year();\n\nexport const setYear = year => (dispatch) => {\n  dispatch({\n    type: SET_YEAR,\n    payload: year\n  });\n};\n\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_YEAR: {\n      return action.payload;\n    }\n\n    default:\n      return state;\n  }\n}\n","const ADD_REMINDER = 'ADD_REMINDER';\nconst REMOVE_REMINDER = 'REMOVE_REMINDER';\nconst REMOVE_REMINDERS = 'REMOVE_REMINDERS';\nconst UPDATE_REMINDER = 'UPDATE_REMINDER';\n\nconst initialState = {};\n\nexport const addReminder = (dateString, reminderObj) => (dispatch) => {\n  dispatch({\n    type: ADD_REMINDER,\n    payload: {\n      date: dateString, reminder: reminderObj\n    }\n  });\n};\n\nexport const editReminder = (dateObj, reminderObj) => (dispatch) => {\n  dispatch({\n    type: UPDATE_REMINDER,\n    payload: {\n      date: dateObj, reminder: reminderObj\n    }\n  });\n};\n\nexport const removeReminders = (dateObj) => (dispatch) => {\n  dispatch({\n    type: REMOVE_REMINDERS,\n    payload: {\n      date: dateObj\n    }\n  });\n};\n\nexport const removeReminder = (dateObj, reminderObj) => (dispatch) => {\n  dispatch({\n    type: REMOVE_REMINDER,\n    payload: {\n      date: dateObj, reminder: reminderObj\n    }\n  });\n};\n\n/*\n{\n  'date': [reminders]...\n}\n*/\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_REMINDER: {\n      const newState = { ...state };\n\n      if (!newState[action.payload.date]) {\n        newState[action.payload.date] = [];\n      }\n      newState[action.payload.date].push({ ...action.payload.reminder });\n      return newState;\n    }\n\n    case UPDATE_REMINDER: {\n      const newState = { ...state };\n      const dates = [...newState[action.payload.date]];\n\n      const index = dates.findIndex(item => action.payload.reminder.uuid === item.uuid);\n\n      dates[index] = { ...action.payload.reminder };\n      newState[action.payload.date] = dates;\n      return newState;\n    }\n\n    case REMOVE_REMINDER: {\n      const newState = { ...state };\n      const dates = [...newState[action.payload.date]];\n\n      const index = dates.findIndex(item => action.payload.reminder.uuid === item.uuid);\n\n      dates.splice(index, 1);\n      newState[action.payload.date] = dates;\n      return newState;\n    }\n\n    case REMOVE_REMINDERS: {\n      const newState = { ...state };\n      newState[action.payload.date] = [];\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport month from './month';\nimport year from './year';\nimport reminders from './reminders';\n\nexport default history => combineReducers({\n  router: connectRouter(history),\n  reminders,\n  month,\n  year,\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport { createBrowserHistory } from 'history';\nimport thunk from 'redux-thunk';\n// import logger from 'redux-logger';\nimport { routerMiddleware } from 'connected-react-router';\nimport createRootReducer from './modules/reducers';\n\nexport const history = createBrowserHistory();\nconst enhancers = [];\n\nconst DEVELOPMENT = process.env.NODE_ENV === 'development';\n\nif (DEVELOPMENT) {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(routerMiddleware(history),\n    thunk),\n  ...enhancers\n);\n\nexport default function configureStore(preloadedState) {\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    composedEnhancers\n  );\n\n  return store;\n}\n","import React, { useState } from 'react';\n\nconst EditReminderContext = React.createContext([{}, () => {}]);\n\nconst EditReminderProvider = (props) => {\n  const [state, setState] = useState({\n    isOpen: false,\n    start: '7:30',\n    end: '7:30',\n    date: null,\n    note: '',\n    city: '',\n    color: '',\n  });\n\n  const { children } = props;\n  return (\n    <EditReminderContext.Provider value={[state, setState]}>\n      {children}\n    </EditReminderContext.Provider>\n  );\n};\n\nexport { EditReminderContext, EditReminderProvider };\n","import axios from 'axios';\n\nconst baseURL = 'https://api.openweathermap.org/data/2.5';\nconst apiURL = `${baseURL}/`;\nconst axiosClient = axios.create({ baseURL: apiURL });\n\nclass WeatherAPI {\n  static get = filters => axiosClient.get('/find/', {\n    params: {\n      ...filters,\n      appid: 'f92c1f4990b0574d4a4e4d3dd556f388',\n      units: 'imperial'\n    }\n  });\n}\n\nexport {\n  WeatherAPI\n};\n","import { useContext } from 'react';\nimport { EditReminderContext } from './EditReminderContext';\n\nconst useEditReminder = () => {\n  const [state, setState] = useContext(EditReminderContext);\n\n  function toggleOpen() {\n    setState(state => ({ ...state, isOpen: !state.isOpen }));\n  }\n\n  function setOpen(value) {\n    if (!value) {\n      setState(state => ({}));\n    }\n\n    setState(state => ({ ...state, isOpen: value }));\n  }\n\n  function setOpenDate(date, isOpen) {\n    setState(state => ({ ...state, date, isOpen }));\n  }\n\n  const setStart = (value) => {\n    setState(state => ({ ...state, start: value }));\n  };\n\n  const setEnd = (value) => {\n    setState(state => ({ ...state, end: value }));\n  };\n\n  const setCity = (value) => {\n    setState(state => ({ ...state, city: value }));\n  };\n\n  const setNote = (value) => {\n    setState(state => ({ ...state, note: value }));\n  };\n\n  const setColor = (value) => {\n    setState(state => ({ ...state, color: value }));\n  };\n\n  const reset = () => {\n    setState(state => ({}));\n  };\n\n  const setOpenEditMode = (date, reminder) => {\n    setState(state => ({\n      ...reminder,\n      date,\n      editMode: true,\n      isOpen: true,\n    }));\n  };\n\n\n  return {\n    toggleOpen,\n    setOpen,\n    setCity,\n    setStart,\n    setEnd,\n    reset,\n    setOpenDate,\n    setOpenEditMode,\n    setNote,\n    isOpen: state.isOpen,\n    reminderState: state,\n    city: state.city,\n    note: state.note,\n    date: state.date,\n    start: state.start,\n    end: state.end,\n    editMode: state.editMode,\n    color: state.color,\n    setColor,\n  };\n};\n\nexport default useEditReminder;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Input from '@material-ui/core/Input';\nimport swal from 'sweetalert';\nimport { TwitterPicker } from 'react-color';\nimport { useDebounce } from 'use-debounce';\nimport TextField from '@material-ui/core/TextField';\nimport { WeatherAPI } from '../rest-api';\n\nimport 'rc-time-picker/assets/index.css';\nimport useEditReminder from './useEditReminder';\n\nconst uuidv4 = require('uuid/v4');\n\nconst useStyles = makeStyles(theme => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: 'auto',\n    width: 'fit-content',\n  },\n  formControl: {\n    marginTop: theme.spacing(2),\n    minWidth: 120,\n  },\n  formControlLabel: {\n    marginTop: theme.spacing(1),\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst EditReminder = (props) => {\n  const classes = useStyles();\n  const {\n    isOpen,\n    date,\n    reset,\n    city,\n    start,\n    end,\n    note,\n    reminderState,\n    setStart,\n    setEnd,\n    setCity,\n    setNote,\n    setOpen,\n    editMode,\n    color,\n    setColor,\n  } = useEditReminder();\n  const {\n    addReminder,\n    editReminder\n  } = props;\n\n  const [valueWeather] = useDebounce(city, 1000);\n  const [fullWidth, ] = React.useState(true);\n  const [maxWidth, ] = React.useState('lg');\n  const [weather, setWeather] = useState(null);\n  const [loadingWeather, setLoadingWeather] = useState(false);\n\n  const fetchWeather = async (q) => {\n    try {\n      setLoadingWeather(true);\n      const weatherObj = await WeatherAPI.get({\n        q,\n      });\n      setWeather(weatherObj.data.list[0]);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoadingWeather(false);\n    }\n  };\n\n\n  useEffect(() => {\n    if (valueWeather && valueWeather !== '') {\n      fetchWeather(valueWeather);\n    }\n  }, [valueWeather]);\n\n  const handleClose = () => {\n    reset();\n  };\n\n  const handleChangeCity = (e) => {\n    setCity(e.target.value);\n  };\n\n  const handleColorChange = ({ hex }) => {\n    setColor(hex);\n  };\n\n  const handleSubmit = async () => {\n    if (note\n       && start\n       && end\n        && city\n        && !editMode\n    ) {\n      await addReminder(date, {\n        note: reminderState.note,\n        start: reminderState.start,\n        end: reminderState.end,\n        city: reminderState.city,\n        color: reminderState.color,\n        uuid: uuidv4(),\n      });\n\n      setOpen(false);\n    } else if (editMode\n              && note\n       && start\n       && end\n        && city\n    ) {\n      await editReminder(date, {\n        note: reminderState.note,\n        start: reminderState.start,\n        end: reminderState.end,\n        city: reminderState.city,\n        uuid: reminderState.uuid,\n        color: reminderState.color,\n      });\n      setOpen(false);\n    } else {\n      swal('Error', 'Faltan items por seleccionar', 'error');\n    }\n  };\n\n  const handleChange = (e) => {\n    setNote(e.target.value);\n  };\n\n  const onUpdateTimeStart = (evt) => {\n    setStart(evt.target.value);\n  };\n\n  const onUpdateTimeEnd = (evt) => {\n    setEnd(evt.target.value);\n  };\n\n  const errorNote = (reminderState.note || '').length > 30;\n\n  return (\n    <React.Fragment>\n      <Dialog\n        fullWidth={fullWidth}\n        maxWidth={maxWidth}\n        open={isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"max-width-dialog-title\"\n      >\n        <DialogTitle id=\"max-width-dialog-title\">\nDate:\n          { date }\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            <div>\n              <Input\n                error={errorNote}\n                id=\"note\"\n                onChange={handleChange}\n                defaultValue={note}\n                className={classes.input}\n                inputProps={{\n                  'aria-label': 'description',\n                }}\n                fullWidth\n                placeholder=\"Ingrese el mensaje\"\n              />\n            </div>\n            <div>\n              <Input\n                onChange={handleChangeCity}\n                defaultValue={city}\n                className={classes.input}\n                inputProps={{\n                  'aria-label': 'description',\n                }}\n                fullWidth\n                placeholder=\"Ingrese la ciudad\"\n              />\n            </div>\n            <TextField\n              id=\"time\"\n              label=\"Start\"\n              type=\"time\"\n              defaultValue={start}\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              inputProps={{\n                step: 300, // 5 min\n              }}\n              onChange={onUpdateTimeStart}\n            />\n            <TextField\n              id=\"time\"\n              label=\"End\"\n              type=\"time\"\n              defaultValue={end}\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              inputProps={{\n                step: 300, // 5 min\n              }}\n              onChange={onUpdateTimeEnd}\n            />\n            <div>\n              <TwitterPicker\n                color={color}\n                onChangeComplete={handleColorChange}\n              />\n            </div>\n            <div>\n              Weather:\n              {' '}\n              {weather && weather.main.temp}\n              {' '}\n              <br />\n              Descriptions:\n              {' '}\n              {weather && weather.weather[0].main}\n              {' '}\n              <br />\n              Descriptions:\n              {' '}\n              {weather && weather.weather[0].description}\n              {' '}\n              <br />\n            </div>\n          </DialogContentText>\n          <form className={classes.form} noValidate />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleSubmit} color=\"primary\" disabled={loadingWeather}>\n            {loadingWeather ? 'Fetching weather...' : 'Submit'}\n          </Button>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n};\n\nexport default React.memo(EditReminder);\n","const moment = require('moment-timezone');\n\nconst tz = moment.tz.guess();\n/**\n * @param {int} The month number, 0 based\n * @param {int} The year, not zero based, required to account for leap years\n * @return {Date[]} List with date objects for each day of the month\n */\nconst getDaysInMonth = (month, year) => {\n  let iteration = 0;\n  const date = new Date(Date.UTC(year, month, 1));\n  const days = [];\n  while (date.getUTCMonth() === month) {\n    if (iteration === 0) {\n      const weekDay = date.getDay();\n      if (weekDay !== 0) {\n        for (let i = 0; i < weekDay; i++) {\n          const lastDate = new Date(date);\n          lastDate.setDate(lastDate.getDate() - weekDay + i);\n          days.push(lastDate);\n        }\n      }\n    }\n    days.push(new Date(date));\n    date.setDate(date.getDate() + 1);\n    iteration++;\n  }\n\n  iteration = 0;\n  while (days.length < 35) {\n    date.setDate(date.getDate() + iteration);\n    days.push(new Date(date));\n    iteration++;\n  }\n  return days;\n};\n\nconst formatDate = (date) => {\n  const d = new Date(date);\n\n\n  let month = `${d.getUTCMonth() + 1}`;\n\n\n  let day = `${d.getUTCDate()}`;\n\n\n  const year = d.getFullYear();\n\n  if (month.length < 2) month = `0${month}`;\n  if (day.length < 2) day = `0${day}`;\n\n  return [year, month, day].join('-');\n};\n\nexport {\n  getDaysInMonth,\n  formatDate\n};\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\n\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport useEditReminder from './useEditReminder';\n\nconst useStyles = makeStyles({\n  smallLabels: {\n    fontSize: '0.7em'\n  },\n  card: {\n    minWidth: 100,\n    maxWidth: 200,\n    overflowX: 'auto',\n  },\n  cardEmpty: {\n    minWidth: 10,\n    filter: 'blur(0.7px)',\n    overflowX: 'auto',\n  },\n  title: {\n    fontSize: 12,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n});\n\nconst ItemDate = (props) => {\n  const classes = useStyles();\n  const {\n    type,\n    name,\n    reminders,\n    date,\n    keyDate,\n    month,\n    removeReminders,\n    removeReminder,\n  } = props;\n\n  const {\n    isOpen,\n    setOpenDate,\n    setOpenEditMode,\n    reset,\n  } = useEditReminder();\n\n  if (type === 'header') {\n    return (\n      <div>\n        {name}\n      </div>\n    );\n  }\n\n  reminders.sort((reminderA, reminderB) => {\n    const {\n      start: startA,\n      end: endA\n    } = reminderA;\n\n    const {\n      start: startB,\n      end: endB\n    } = reminderB;\n\n    const [hourA, minuteA] = startA.split(':');\n    const [hourB, minuteB] = startB.split(':');\n\n    return (Number.parseInt(hourA) > Number.parseInt(hourB)\n           && Number.parseInt(minuteA) > Number.parseInt(minuteB));\n  });\n\n  const editReminder = (reminder) => {\n    setOpenEditMode(keyDate, reminder);\n  };\n\n\n  const remindersJSX = reminders.map((itemReminder) => {\n    const {\n      start, end, date, note, city, color,\n    } = itemReminder;\n\n    return (\n      <Chip\n        styles={{\n          backgroundColor: color\n        }}\n        label={`${start} - ${end} / ${city} `}\n        variant=\"outlined\"\n        onDelete={() => {\n          removeReminder(keyDate, itemReminder);\n        }}\n        onClick={() => {\n          editReminder(itemReminder);\n        }}\n      />\n    );\n  });\n\n  const openDialog = () => {\n    setOpenDate(keyDate, true);\n  };\n\n  if (month !== date.getUTCMonth()) {\n    return (\n      <Card className={classes.cardEmpty}>\n        <CardContent>\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n            {date.getUTCDate()}\n          </Typography>\n          {remindersJSX}\n        </CardContent>\n        <CardActions>\n          <IconButton\n            onClick={openDialog}\n            aria-label=\"add\"\n            className={classes.margin}\n          >\n            <AddIcon />\n          </IconButton>\n          <Tooltip title=\"Remove all the reminders from current date\">\n            <IconButton\n              onClick={() => {\n                removeReminders(keyDate);\n              }}\n              aria-label=\"delete\"\n              className={classes.margin}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        </CardActions>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          {date.getUTCDate()}\n        </Typography>\n        {remindersJSX}\n      </CardContent>\n      <CardActions>\n        <IconButton\n          onClick={openDialog}\n          aria-label=\"add\"\n          className={classes.margin}\n        >\n          <AddIcon />\n        </IconButton>\n        <Tooltip title=\"Remove all the reminders from current date\">\n          <IconButton\n            onClick={() => {\n              removeReminders(keyDate);\n            }}\n            aria-label=\"delete\"\n            className={classes.margin}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      </CardActions>\n    </Card>\n  );\n};\n\nItemDate.propTypes = {\n  date: PropTypes.instanceOf(Date),\n  name: PropTypes.string,\n  keyDate: PropTypes.string,\n  type: PropTypes.oneOf(['date', 'header']),\n  reminders: PropTypes.arrayOf(PropTypes.shape({})),\n  month: PropTypes.number,\n  removeReminders: PropTypes.func,\n  removeReminder: PropTypes.func,\n};\n\nItemDate.defaultProps = {\n  removeReminder: () => {},\n  removeReminders: () => {},\n  name: null,\n  type: 'header',\n  reminders: [],\n  date: null,\n  keyDate: null,\n  month: null\n};\n\nexport default React.memo(ItemDate);\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport { EditReminderProvider, EditReminderContext } from './EditReminderContext';\nimport EditReminder from './EditReminder';\n\nimport { getDaysInMonth, formatDate } from '../helpers/dateHelper';\n\nimport ItemDate from './ItemDate';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n  },\n  paperTitle: {\n    height: 100,\n    width: 100,\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n}));\n\nconst DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst months = [...new Array(12).fill(1)];\n\nconst Calendar = (props) => {\n  const {\n    month,\n    year,\n    addReminder,\n    editReminder,\n    removeReminder,\n    removeReminders,\n    setMonth,\n    reminders,\n  } = props;\n\n  const changeMonth = (evt) => {\n    setMonth(Number.parseInt(evt.target.value));\n  };\n\n  const classes = useStyles();\n\n  const monthDates = getDaysInMonth(month, year);\n\n  const weekDays = DAYS.map(dayName => (\n    <Col\n      xs={1}\n      lg={1}\n      md={1}\n      key={dayName}\n    >\n      <ItemDate\n        type=\"header\"\n        name={dayName}\n      />\n    </Col>\n  ));\n\n  const childrenItems = ([...new Array(5)]).map((i, index) => {\n    const months = monthDates.slice(index * 7, (index + 1) * 7);\n    const monthsJSX = months.map((date) => {\n      const keyDate = formatDate(date);\n      const remindersFiltered = reminders[keyDate] || [];\n\n      return (\n        <Col\n          xs={1}\n          lg={1}\n          md={1}\n          key={keyDate}\n        >\n          <ItemDate\n            month={month}\n            type=\"date\"\n            date={date}\n            keyDate={keyDate}\n            reminders={remindersFiltered}\n            removeReminder={removeReminder}\n            removeReminders={removeReminders}\n          />\n        </Col>\n      );\n    });\n\n    return (\n      <Row key={i}>\n        { monthsJSX }\n      </Row>\n    );\n  });\n\n  const monthOptionsJSX = months.map((itemMonth, index) => (\n    <option\n      key={itemMonth}\n      value={index}\n      selected={index.toString() === month.toString()}\n    >\n      {index + 1}\n    </option>\n  ));\n\n  return (\n    <EditReminderProvider>\n      <React.Fragment>\n        <label htmlFor=\"month\">Select month: </label>\n        <select\n          id=\"month\"\n          onChange={changeMonth}\n        >\n          {monthOptionsJSX}\n        </select>\n        <Container fluid>\n          <Row>\n            {weekDays}\n          </Row>\n          {childrenItems}\n        </Container>\n        <EditReminder\n          addReminder={addReminder}\n          editReminder={editReminder}\n        />\n      </React.Fragment>\n    </EditReminderProvider>\n  );\n};\n\nCalendar.propTypes = {\n  addReminder: PropTypes.func.isRequired,\n  editReminder: PropTypes.func.isRequired,\n  removeReminder: PropTypes.func.isRequired,\n  removeReminders: PropTypes.func.isRequired,\n  setMonth: PropTypes.func.isRequired,\n  reminders: PropTypes.shape({}).isRequired,\n  month: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n};\n\nexport default React.memo(Calendar);\n","import { connect } from 'react-redux';\nimport Calendar from '../components/Calendar';\n\nimport { setMonth } from '../redux/modules/month';\nimport { setYear } from '../redux/modules/year';\nimport {\n  addReminder,\n  editReminder,\n  removeReminder,\n  removeReminders,\n} from '../redux/modules/reminders';\n\nfunction mapStateToProps(state) {\n  return {\n    month: state.month,\n    year: state.year,\n    reminders: state.reminders,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setMonth: value => dispatch(setMonth(value)),\n    setYear: value => dispatch(setYear(value)),\n    addReminder: (dateObj, value) => dispatch(addReminder(dateObj, value)),\n    editReminder: (dateObj, value) => dispatch(editReminder(dateObj, value)),\n    removeReminder: (dateObj, value) => dispatch(removeReminder(dateObj, value)),\n    removeReminders: dateObj => dispatch(removeReminders(dateObj)),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Calendar);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { Route } from 'react-router'; // react-router v4\nimport { ConnectedRouter } from 'connected-react-router';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport configureStore, { history } from './redux/configureStore';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Calendar from './containers/Calendar'\n\nconst theme = createMuiTheme({\n  typography: {\n    htmlFontSize: 10,\n    useNextVariants: true,\n  },\n});\n\nconst initialState = {};\n\nconst store = configureStore(initialState);\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n          <Route path=\"/\" component={Calendar} />\n        </ConnectedRouter>\n      </Provider>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}